
void Body::push(size_t B_index, size_t bit_index) {
    // TODO
    for (uint8_t i = size - 1; i > B_index; --i) {
        B[i] = (B[i] >> fp_size) | ((B[i - 1] & MASK(fp_size)) << (BODY_BLOCK_SIZE - fp_size));
    }
    // DID NOT HANDLE THE CASE IN WHICH LAST PUSH OCCURS BETWEEN TWO CELLS, PERHAPS IMPOSSIBLE SCENARIO.
//    uint8_t bit_index = end % HEADER_BLOCK_SIZE;
    uint8_t shift = BODY_BLOCK_SIZE - bit_index;
    BODY_BLOCK_TYPE upper = (shift < BODY_BLOCK_SIZE) ? (B[B_index] >> shift) << shift : 0;
//    BODY_BLOCK_TYPE upper = (B[B_index] >> shift) << shift;
    BODY_BLOCK_TYPE lower = (B[B_index] >> 1) & (MASK(shift - fp_size)); /// ????
    B[B_index] = (upper | lower | SL(shift - 1));

    /*size_t rem = ((FP_TYPE_SIZE % BODY_BLOCK_SIZE) * (this->size - 1)) % BODY_BLOCK_SIZE;
    for (uint i = size - 1; i > B_index + 1; ++i) {

    }
    B[
    size_t rem = ((FP_TYPE_SIZE % BODY_BLOCK_SIZE) * (this->size - 1)) % BODY_BLOCK_SIZE;
*/

}

void Body::pull(size_t B_index, size_t bit_index) {

}

void Body::get_cell(size_t qIndex, BODY_BLOCK_TYPE *dataArray, size_t arraySize) {
    size_t address = qIndex * fp_size;
    for (int i = 0; i < arraySize - 1; ++i) {
        dataArray[i] = get_bits(address, BODY_BLOCK_SIZE);
        address += BODY_BLOCK_SIZE;
    }
    auto bitsLeft = fp_size % BODY_BLOCK_SIZE;
    dataArray[arraySize - 1] = get_bits(address, bitsLeft);
}

BODY_BLOCK_TYPE Body::get_bits(size_t address, size_t length) {
    size_t aIndex = address / BODY_BLOCK_SIZE, bitIndex = address % BODY_BLOCK_SIZE;
    size_t bitsFromRight = MOD_INVERSE(bitIndex);
    BODY_BLOCK_TYPE res = B[aIndex];
    if (bitIndex + length < BODY_BLOCK_SIZE) {
        BODY_BLOCK_TYPE temp = ON((bitsFromRight + 1), (bitsFromRight + 1 - length));
        res &= temp;
        size_t shift_right = ++bitsFromRight - length;
        res >>= shift_right;
    } else if (bitIndex + length == BODY_BLOCK_SIZE) {
        res &= MASK(bitsFromRight + 1);
    } else {
        size_t temp_length = bitIndex + length - BODY_BLOCK_SIZE;
        res &= get_bits(address, length - temp_length);
        res <<= temp_length;
        res += get_bits((aIndex + 1) * BODY_BLOCK_SIZE, temp_length);
    }
    return res;
}

/*bool Body::get_bits_att(size_t address, size_t length, FP_TYPE remainder) {
    size_t aIndex = address / BODY_BLOCK_SIZE, bitIndex = address % BODY_BLOCK_SIZE;
    size_t bitsFromRight = MOD_INVERSE(bitIndex);
    BODY_BLOCK_TYPE res = B[aIndex];
    if (bitIndex + length < BODY_BLOCK_SIZE) {
        BODY_BLOCK_TYPE temp = ON((bitsFromRight + 1), (bitsFromRight + 1 - length));
        res &= temp;
        size_t shift_right = ++bitsFromRight - length;
        res >>= shift_right;
    } else if (bitIndex + length == BODY_BLOCK_SIZE) {
        res &= MASK(bitsFromRight + 1);
    } else {
        size_t temp_length = bitIndex + length - BODY_BLOCK_SIZE;
        res &= get_bits(address, length - temp_length);
        res <<= temp_length;
        res += get_bits((aIndex + 1) * BODY_BLOCK_SIZE, temp_length);
    }
}*/

void Body::get_data(size_t qIndex, BODY_BLOCK_TYPE *dataArray, size_t arraySize) {
    size_t address = qIndex * fp_size;
    for (int i = 0; i < arraySize - 1; ++i) {
        dataArray[i] = get_bits(address, BODY_BLOCK_SIZE);
        address += BODY_BLOCK_SIZE;
    }
    auto bitsLeft = (fp_size) % BODY_BLOCK_SIZE;
    dataArray[arraySize - 1] = get_bits(address, bitsLeft);
    /*if (bitsLeft > MB)
        dataArray[arraySize  - 1] = get_bits(address, bitsLeft - MB);
    else {
        if (MB == bitsLeft) return;
        auto shiftRight = MB - bitsLeft;
        dataArray[arraySize  - 2] >>= shiftRight;
    }*/
}


void Body::set_cell(size_t qIndex, BODY_BLOCK_TYPE *dataArray, size_t arraySize) {
    size_t address = qIndex * fp_size;
    for (int i = 0; i < arraySize - 1; ++i) {
        set_bits(address, BODY_BLOCK_SIZE, dataArray[i]);
        address += BODY_BLOCK_SIZE;
    }
    auto bitsLeft = fp_size % BODY_BLOCK_SIZE;
    set_bits(address, bitsLeft, dataArray[arraySize - 1]);
}

void Body::set_cell(size_t qIndex, BODY_BLOCK_TYPE *dataArray, size_t arraySize, BODY_BLOCK_TYPE tempMB) {
    size_t address = qIndex * fp_size;
    for (int i = 0; i < arraySize - 1; ++i) {
        set_bits(address, BODY_BLOCK_SIZE, dataArray[i]);
        address += BODY_BLOCK_SIZE;
    }
    auto bitsLeft = fp_size % BODY_BLOCK_SIZE;
    set_bits(address, bitsLeft, (dataArray[arraySize - 1]) | tempMB);
}

void Body::set_bits(size_t address, size_t bitsToWriteCounter, size_t value) {
    value &= MASK(bitsToWriteCounter);
    size_t aIndex = address / BODY_BLOCK_SIZE, bitIndex = address % BODY_BLOCK_SIZE;
    size_t rBitsCounter = MOD_INVERSE(bitIndex) + 1;

    if (bitIndex + bitsToWriteCounter < BODY_BLOCK_SIZE) {
        value <<= (BODY_BLOCK_SIZE - (bitIndex + bitsToWriteCounter));
        set_help(aIndex, value, rBitsCounter, rBitsCounter - bitsToWriteCounter);
    } else if (bitIndex + bitsToWriteCounter == BODY_BLOCK_SIZE) {
        set_help(aIndex, value, rBitsCounter, 0);
    } else {
        size_t exceedingBits = bitIndex + bitsToWriteCounter - BODY_BLOCK_SIZE;
        uint64_t firstVal = value >> exceedingBits;
        uint64_t secondVal = value & MASK(exceedingBits);
        secondVal <<= (BODY_BLOCK_SIZE - exceedingBits);
        set_help(aIndex, firstVal, rBitsCounter, 0);
        if (exceedingBits > BODY_BLOCK_SIZE)
            set_bits((++aIndex) * BODY_BLOCK_SIZE, exceedingBits, secondVal);
        else
            set_help(++aIndex, secondVal, BODY_BLOCK_SIZE, BODY_BLOCK_SIZE - exceedingBits);
    }
}

void Body::set_bit(size_t address, bool setOn) {
    size_t aIndex, bitIndex, shift;
    bitIndex = address % BODY_BLOCK_SIZE;
    aIndex = address / BODY_BLOCK_SIZE;
    shift = MOD_INVERSE(bitIndex);
    size_t temp = (1ULL << shift);
    (setOn) ? B[aIndex] |= temp : B[aIndex] ^= temp;
}

void Body::set_help(size_t aIndex, size_t value, size_t borderStart, size_t borderEnd) {
    B[aIndex] &= OFF(borderStart, borderEnd);
    value &= ON(borderStart, borderEnd);
    B[aIndex] |= value;
}

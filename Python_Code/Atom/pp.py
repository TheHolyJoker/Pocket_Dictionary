from math import *
from random import *
LENGTH = 8


# def number_to_32

def to_bin_with_leading_zeros(n: int, length: int) -> str:
    if n >= 0:
        s = bin(n)[2:]
    else:
        s = bin(n)[3:]

    diff = length - len(s)
    if diff > 0:
        return "0" * diff + s
    elif diff == 0:
        return s
    else:
        assert False


def to_bin_with_leading_zeros2(n: int, length: int) -> str:
    if n >= 0:
        s = bin(n)[2:]
    else:
        s = bin(n)[3:]

    diff = length - len(s)
    if diff > 0:
        return "0" * diff + s
    return s
    # elif diff == 0:
    #     return s
    # else:
    #     assert False


def my_bin(n: int, length: int = LENGTH) -> str:
    return to_bin_with_leading_zeros(n, length)


def my_bin2(n: int, length: int = LENGTH) -> str:
    return to_bin_with_leading_zeros(n, length)


def pp_s_bin(s: str):
    temp = [s[i*LENGTH:(i+1)*LENGTH] for i in range(len(s) // LENGTH)]
    temp = [i[:LENGTH//2] + "." + i[LENGTH//2:] for i in temp]
    return "|".join(temp)


def pp_bin(n: int, length: int = 32):
    return pp_s_bin(my_bin(n, length))
    # temp = [i[:LENGTH//2] + "." + i[LENGTH//2:] for i in temp]
    # return "|".join(temp)


def pp_bin_inv(s: str) -> int:
    temp = [i for i in s if i == '0' or i == '1']
    s = "".join(temp)
    return int(s, 2)


def split_by_fp(cm: str, fp_size: int) -> list:
    # todo plus 1 problem?/home/tomer
    return [int(cm[i*fp_size:(i+1)*fp_size], 2) for i in range(len(cm) // fp_size)]


def split_by_fp_inv(l: list, fp_size: int) -> str:
    # todo plus 1 problem?
    temp = [my_bin(i, fp_size) for i in l]
    temp_s = "".join(temp)
    temp_s += "0"*(32-len(temp_s))
    return temp_s


def list_to_consecutive_memory(l: list, length: int = LENGTH) -> str:
    return "".join([(my_bin(i)) for i in l])
    temp = [i[:LENGTH//2] + "." + i[LENGTH//2:] for i in temp]
    return "|".join(temp)
    # return "|".join([(my_bin(i)) for i in l])


def cons_mem_print(s: str) -> str:
    assert len(s) % LENGTH == 0
    temp = [s[i*LENGTH:(i+1)*LENGTH] for i in range(len(s) // LENGTH)]
    temp = [i[:LENGTH//2] + "." + i[LENGTH//2:] for i in temp]
    res = "|".join(temp)
    print("", res)
    return res


def number_to_split_run_list(n: int, fp_size: int) -> list:
    s = bin(n)[2:]
    if len(s) < 32:
        s = my_bin(n, 32)
    return split_by_fp(s, fp_size)


def my_bit_count(n: int) -> int:
    s = bin(n)[2:]
    return sum([1 for i in range(len(s)) if s[i] == '1'])


def b32_to_b64(w1: int, w2: int) -> int:
    assert ((0 <= w1 < (1 << 32)) and (0 <= w2 < (1 << 32)))
    return (w1 << 32) | w2


#
# def vector_get_inteval(vec:str, quotient:int)->tuple:
#     zero_counter = 0
#     continue_from_index = 0
#     start_index = -1
#     end_index = -1
#
#     for i in range(len(vec)):
#         if zero_counter >= quotient - 1:
#             start_index = i
#             continue_from_index = i
#             break
#         if vec[i] == '0':
#             zero_counter += 1
#
#     # print("h continue_from_index {:}".format( continue_from_index))
#     for i in range(continue_from_index, len(vec)):
#         if vec[i] == '0':
#             return start_index, i
#             # end_index = i
#
#         #     zero_counter += 1
#         # if zero_counter == quotient + 1:
#         #     end_index = i
#         #     return start_index, end_index
#     assert False
64 + 7*64


def naive_get_interval(vec: str, quotient: int) -> tuple:
    if quotient == 0:
        if vec[0] == '0':
            return 0, 0
        else:
            return 0, vec.find('0')

    indexes = [i for i in range(len(vec)) if vec[i] == '0']
    return indexes[quotient - 1] + 1, indexes[quotient]


def naive_get_interval_from_int(n: int, quotient: int) -> tuple:
    return naive_get_interval(my_bin(n, 32), quotient)

# def b32_get_interval(n:int, quotient:int)->tuple:
#     return vector_get_inteval(my_bin(n,32),quotient)
3221225472 >> 22
3221225472 & ((1<<32) - 1)
bin(768)
# conv_32b_to_64b
bin(850)[2:]
bin(3911)[2:]
f = 240
l = 12
192*2 / 32
f2 = 192
l2 = 11
q2 = 62
s
s2[12*32:12*32 + 32]
int(s2[12*32:12*32 + 32],2)


s2[f2*2:f2*2 +l2]
int(s2[f2*2:f2*2 +l2],2)
s2.find('11')
# s2[63:].index('1') + 63
184*2
s2[120]
sq
s[30]

s[f * 2:f * 2 + l]
int(s[f * 2:f * 2 + l], 2)
s[38 * 2:38 * 2 + l]
int(s[38 * 2:38 * 2 + l],2)

s = "000000000000000000000000000000001"
len(s)
s.count('0')
assert False

x = 4827189762586116096
pp_bin(x,64)
pp_bin(y,64)
y = (x<<15) & ((1<<65) - 1)
# def __pdep32(a, mask):
    # tmp := a
    # dst := 0
    # m := 0
    # k := 0
    # DO WHILE m < 32
    # 	IF mask[m] == 1
    # 		dst[m] := tmp[k]
    # 		k := k + 1
    # 	FI
    # 	m := m + 1
    # OD

def get_bit(x, i):
    return x & (1 << i)


# def set_bit(x, i, b):
#     return x &

def pdep(a, mask, size: int = 32):
    temp = 0
    dst = 0
    k = 0
    b = 1
    for i in range(size):
        if mask & b:
            dst


def count_ones(x):
    r = 0
    temp = bin(x)[2:].count('1')
    while x:
        r += x & 1
        x >>= 1
    assert (r == temp)
    return r


count_ones(1)
x = 1
bin(x)[2:].count('1')


def get_lowerest_bit(x):
    return x & -x


for i in range(65):
    print(i, f(i), count_ones(i))

pp_bin(113983158044280366, 64)
pp_bin(113980000000000000, 64)
pp_bin(72685035695, 64)
pp_bin(322613908935, 64)
pp_bin(13497929568569990414, 64)

pp_bin(2147483648)
pp_bin(1107591176)
naive_get_interval_from_int(1107591176, 11)
pp_bin(1107361809)
pp_bin(1107361808)

b32_get_interval(1107591176, 11)

pp_bin(67108864)
w1 = 1107361792
pp_bin(1107361792)
pp_bin(1107591168)

b32_get_interval(1107361792, 11)

w1, w2 = 1107591176, 2147483648
w1, w2 ==
pp_bin(w1)
s1 = my_bin(w1, 32)
s2 = my_bin(w2, 32)
vector_get_inteval(s1 + s2, 24)

b32_to_b64(w1, w2)
w1, w2 = 67108864, 0
my_bin(w1, 32)
s = my_bin(w1, 32)
zeros = [i for i in range(len(s)) if s[i] == '0']
zeros[27]
my_bin(1107296256, 32)
pp_bin(1107296256)
# my_bin(1299600389,32)[10]
# end = 42
# pp_bin(945117276)
# pp_bin(942321848)
# pp_bin(950710456)
#
# my_bin(2147483647,32)
# my_bin(1967513926,32)
# my_bin(1787544204,32)
# end = 35
# pp_bin(1102520059)
# pp_bin(1356566397)
# pp_bin(1222348669)
#
#
#
# my_bin(847090147,32)
# pp_bin(846930886)
# pp_bin(847090147)
# pp_bin(844992995)
# s
# s = pp_bin(not_mask,64)[32:]
# pp_bin(mask)
# mask = 4194303
# not_mask = 18446744073705357312
# bin(18446744069414584320)
# mask32 = (1<<32) - 1
# s = "00110010011110110010001111000110011001000011110010011000011010010110011000110011010010000111001101110100101100001101110001010001"
# a_i = 1714636915
# slot = 7364309478734299135
# (a_i << 32) + mask32 == slot
# s[70:80]
# s[:32].count('0')
# s[32:32*2].count('0')
# s[:72].count('0')
# s[:73].count('0')
# cons_mem_print(s)
# 1<<32
# 4294967296 - 1
#
# my_bit_count(32)
# my_bit_count(32 + 16)
# my_bit_count(32 + 16 + 8 + 4 + 1 + 2358)
#
# 88 % 32
# 1<<(32 - (87 % 32))
# assert False
#
# v1 = 262144
# v2 = 524288
#
# 1<<18
# 1<<19
# my_bin(v1,32)
# my_bin(v2,32)
# v1 *2 == v2
# fp73 = 28
# before
#
# after
#
# mid
#
# vec
#
# for i in range(len(vec)):
#     if vec[i] != mid[i]:
#         print(i)
#
# pp_bin(780747936, 32)
#
# int(before[28:28 + 28],2)
# mid == vec
# pp_bin(b_list[1],fp73)
# pp_bin(m_list[1],fp73)
# pp_bin(a_list[1],fp73)
# pp_bin(v_list[1],fp73)
# len(b_list)
# b_list[:5]
# m_list[:5]
# a_list[:5]
# v_list[:5]
# b_list = split_by_fp(before, fp73)
# m_list = split_by_fp(mid, fp73)
# a_list = split_by_fp(after, fp73)
# v_list = split_by_fp(vec, fp73)
# before[:32]
#    mid[:32]
#
# log2(103265643)
# l64 =  [before[:64], mid[:64], after[:64], vec[:64]]
# for i in l64:
#     print(i)
# for i in l64:
#     print(pp_s_bin(i[28:]))
#
# before[:64]
# mid[:64]
# mid == before
# after == mid
# 56 // 32
# 56 % 32
# before[:32]
# mid[:32]
# res = vec[:64]
# res == before[:64]
# res == mid[:64]
# res == after[:64]
# vec == after
# vec[32:].count("1")
# vec[:32]
# after[:32]
#
#
# t = "10111110111111000100111110111011111"
# t[-fp73:]
#
# mid == after
# len(mid)
# len(after)
# len(before)
# mid_before_diff = [i for i in range(len(after)) if mid[i] != before[i]]
# mid_before_diff
# s1 = before[:64]
# s2 = after[:64]
#
# pp_s_bin(s1)
# pp_s_bin(s2)
#
# len(before)
# len(after)
# diff = [i for i in range(len(after)) if after[i] != before[i]]
# len(diff)
# diff
# before == after
# for i in range(len(after)):
#     if i
#
#
# my_bin(780747936,32)
# pp_bin(780747936)
# pp_bin(780747945)
# pp_bin(10287406fo)
#
# s = "0000100010000110010000101001100011101000"
# len(s)
# s1 = s[:32]
# s2 = s[32:]
# s3 = s2 + "0"*24
#
#
# s2 = my_bin(int(s[32:],2),32)
# s2
# int(s2,2)
# vl = [143016600, 3892314112]
# int(s[:32],2)
# int(s1[32:],2)
# # log2(3758096384)
# # 3758096384 < ((1<<32) - 1)
# # l = [143016600, 3758096384]
# # s1 = my_bin(l[0],32) + my_bin(l[1],32)
# # s1
# # s3 = "0000100010000110010000101001100011100000"
# # s3[32 + 29: + 5]
# # s3[32 + 3: 32 + 3 + 5]
# # len(s3)
# # s3[6*5:7*5]
# # 30
# # pp_s_bin(s1)
# # s1[4]
# # s1[5]
# # s1[6]
# # s1[7]
# # split_s1 = s1.split("0")
# # runs = [i + '0' for i in split_s1]
# # runs
#
# s2 = split_by_fp_inv([1,2,3,4,5,6,7,0],5)
# s1
# s2
# indexes = [i for i in range(len(s1)) if s1[i] == '0']
# sx = "0000000001000100001100100001010011000000"
# sy = '0000000001000100001100100001010011011000'
# log2(4194304)
# 1<<22
#
#
# temp_l = sx.split("0")
# temp_l = [i + "0" for i in temp_l]
# temp_l
# int(sx[32:],2)
# int(sy[32:],2)
#
# split_by_fp(s,5)
# split_by_fp_inv([0, 1, 2, 3, 4, 5, 6, 24],5)
# # l = [1 << i for i in range(8)]
# # l
# # list_to_consecutive_memory(l)
# # list_to_consecutive_memory(l)
# # k = list_to_consecutive_memory(l)
# # k
# # cons_mem_print(k)
# #
# #
# # def conse_p(l: str):
# #     pass
# #
# #
# # # example:
# # x = 406847488
# # s = pp_bin(x)
# # s
# # pp_bin_inv(s)
# # x == pp_bin_inv(s)
# #
# # res = split_by_fp(my_bin(x, 32), 5)
# # res
# # split_by_fp_inv(res, 5) == my_bin(x, 32)
# # res_inv = split_by_fp_inv(res, 5)
# # res_inv
# # pp_s_bin(res_inv)
# #
# # # end
# #
# # y = 406847488
# # pp_bin(x)
# # pp_bin(y)
# #
# # # step 1
# # res1 = [1] + [0]*7
# # s_res1 = split_by_fp_inv(res1, 5)
# # s_res1
# # s_res1_1 = s_res1[:32]
# # int(s_res1_1, 2)
# # pp_bin(134217728)
# # # temp42 = pp_bin(34359738368)
# # # pp_s_bin(s_res1)
# # pp_bin_inv('0000.1000|0000.0000|0000.0000|0000.0000')
# # # pp_bin(34359738368)
# # s3 = pp_bin(x)
# # s3
# # s2 = '00011000010000000000000000000000'
# #
# # x = 134217728
# # y = 134217728
# # pp_bin(x)
# #
# #
# # # step 2
# #
# # res2 = [1, 2] + [0]*6
# # s_res2 = split_by_fp_inv(res2, 5)
# # pp_s_bin(s_res2)
# # y = int(s_res2[:32],2)
# # y
# #
# # x = 142606336
# # x == y
# #
# # pp_bin(x)
# # pp_bin(y)
# #
# #
# # # step 3
# #
# # res3 = [1, 2, 3] + [0]*5
# # s_res3 = split_by_fp_inv(res3, 5)
# # pp_s_bin(s_res3)
# # y = int(s_res3[:32],2)
# # y
# #
# # x = 415498240
# # x == y
# #
# # pp_bin(x)
# # pp_bin(y)
# #
# # number_to_split_run_list(x,5)
# # number_to_split_run_list(y,5)
# #
# # number_to_split_run_list(701216768,3)
# #
# #
# #
# #
# #
# # r7 = list(range(8))
# # r7
# # s_r7 = split_by_fp_inv(r7, 3)
# # pp_s_bin(s_r7)
# # y = int(s_r7[:32],2)
# # y
# #
# # x = 701216768
# # x == y
# #
# # pp_bin(x)
# # pp_bin(y)
# #
# # number_to_split_run_list(x,5)
# # number_to_split_run_list(y,5)
# #
# #
# #
# #
# #
# #
# #
# #
# #
# #
# #
# # res3 = [1,2,3] + [0]*5
# # s_res = split_by_fp_inv(res3, 5)
# # s_res
# # s_res3_1 = s_res[:32]
# # s_res3_2 = s_res[32:]
# # int(s_res1, 2)
# # int(s_res3_1, 2)
# # int(s_res3_2, 2)
# #
# # pp_s_bin(s_res3_1)
# #
# # s3 = pp_bin(x)
# # s3
# # s2 = '00011000010000000000000000000000'
# #
# # x = 134217728
# # y = 134217728
# # pp_bin(x)
# #
# #
# #
# # int(s2, 2) == x
# # # for i in range(1000,2000):
# # #     assert(pp_bin_inv(pp_bin(i)) == i)
# # l3 = [i for i in s3 if i == '0' or i == 1]
# # l3
# #
# #
# # a = list(range(16))
# # b = [str(i) for i in a]
# # c = "".join(b)
# # c
# #
# #
# # res = split_by_fp(my_bin(x, 32), 5)
# # split_by_fp_inv(res, 5) == my_bin(x, 32)
# #
# # [1, 2] + [0]*6
# # des_res = split_by_fp_inv([1, 2] + [0]*6, 5)
# # pp_s_bin(des_res)
# # pp_bin(x)
# #
# #
# # y= 1<<27
# # y >> 32
# # 0<<32
# # up = 134217728
# # pp_bin(up)
#
# 204 % 28
